{
	"info": {
		"_postman_id": "10763911-46c4-45bb-b404-f6574de34c48",
		"name": "CQR - APIs Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23858416",
		"_collection_link": "https://gold-escape-504231.postman.co/workspace/RCV-Learning~e0b1eff9-e42d-4988-9e29-008ce0b8c6bb/collection/23858416-10763911-46c4-45bb-b404-f6574de34c48?action=share&source=collection_link&creator=23858416"
	},
	"item": [
		{
			"name": "CQR-Service",
			"item": [
				{
					"name": "Validate card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property contains transactionRef, responseCode, and responseMessage\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('transactionRef');\r",
									"    pm.expect(data).to.have.property('responseCode');\r",
									"    pm.expect(data).to.have.property('responseMessage');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3Mzk0MzI3MiwiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjAwYjNlNmJkLTYzY2QtNGIxZi1hMDA5LTQ3ZmFmYTRlNGIyOCJ9.JAz3r-dJg3O-MXt7xdlhhMTnGkTmjr7IZjf4vQ2kfW4yiDuuzvLNQgsRy-HQf9dZgpzRqk6ZuQ1uFYSb0IA1Tipreb2zbG4jZ-ezmUYydz6nw5zxHA_5fkFmOQL7nKq6a8C1_X84oaJ_i3G_-fceamUh7mZXxl8IUGU5NERxBZwc7WO9sUD11iUX-93bbrCwnlAmK8IthZbL__en-FO4opA6vOG37W7vBmjb97s42Do2PPtcfGp9KRehmJ8-UBV_eeLE1bRI5zPsJyxSBnL5Xgd4aFYy2aTvufNFthGoorST_F9MlzuUSIvzEq-K9NyiHc4PzAvkQxBMaNe32TY7aw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"needImage\": true,\r\n    \"channel\": \"API\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\"\r\n        \r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/card/validate",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"card",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Data property has transactionRef, qrID, aggregatorID, mobileNumber, qrRef, status, and enabled fields\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.include.all.keys('transactionRef', 'qrID', 'aggregatorID', 'mobileNumber', 'qrRef', 'status', 'enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"Data property has refValidityMinutes, expiryDate, panLast4Digits, cardType, issuerBank, accountNumber, imageUrl, and imageData fields\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.include.all.keys('refValidityMinutes', 'expiryDate', 'panLast4Digits', 'cardType', 'issuerBank', 'accountNumber', 'imageUrl', 'imageData');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"//pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"otp\": \"123456\",\r\n    \"needImage\": true,\r\n    \"channel\": \"{{channel}}\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\"\r\n        \r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful with out OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - txId, code, message, data, and errors\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.errors).to.be.exist;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"\r",
									"\r",
									"    pm.test(\" message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.eql('INVALID_REQUEST')\r",
									"\r",
									"   \r",
									"\r",
									"});\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"888888\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"otp\": \"\",\r\n    \"needImage\": true,\r\n    \"channel\": \"WEB\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"111111111111\",\r\n        \"nin\": \"111111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful empty mobile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - txId, code, message, data, and errors\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"   // pm.expect(responseData.txId).to.be.null;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    //pm.expect(responseData.errors).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"\r",
									"    pm.test(\"Verify code \", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.code).to.eql('45')\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify errors IS mobileNumber: Empty or Invalid mobile number, prepend country code with your mobile number like - 2348058867077\"\r",
									"    , function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									" pm.expect(responseData.errors).to.include('mobileNumber: Empty or Invalid mobile number, prepend country code with your mobile number like - 2348058867077');\r",
									"});\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"888888\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"\",\r\n    \"otp\": \"123456\",\r\n    \"needImage\": true,\r\n    \"channel\": \"API\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"111111111111\",\r\n        \"nin\": \"111111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful empty Aggregator ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - txId, code, message, data, and errors\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"   // pm.expect(responseData.txId).to.be.null;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    //pm.expect(responseData.errors).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify message Unauthorized access due to AggregatorId validation failure \", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									" pm.expect(responseData.message).to.include('Unauthorized access due to AggregatorId validation failure');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"\",\r\n    \"transactionRef\": \"888888\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"otp\": \"123456\",\r\n    \"needImage\": true,\r\n    \"channel\": \"API\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"111111111111\",\r\n        \"nin\": \"111111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful  invalid auth data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - txId, code, message, data, and errors\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"   // pm.expect(responseData.txId).to.be.null;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    //pm.expect(responseData.errors).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify message is Card Validation is required to generate a QR \", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									" pm.expect(responseData.message).to.include('Card Validation is required to generate a QR');\r",
									"});\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"888888\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7++qd3HWNtA+4luA7Lwpjb/+rURA++//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"otp\": \"123456\",\r\n    \"needImage\": true,\r\n    \"channel\": \"API\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"111111111111\",\r\n        \"nin\": \"111111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Single QrID successful  Empty name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code and message are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Ensure that the Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"\r",
									"    pm.test(\"Verify code \", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.code).to.eql('40')\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\" Verify message is name fieldis required\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									" pm.expect(responseData.message).to.include('name field is required');\r",
									"});\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"737373\",\r\n    \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"otp\": \"123456\",\r\n    \"needImage\": true,\r\n    \"channel\": \"WEB\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"bvn\": \"111111111111\",\r\n        \"nin\": \"111111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable QrId successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.to.have.status(200));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.exist;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.errors).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TransactionRef is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData.data).to.have.property('transactionRef').that.is.a('string').and.to.have.lengthOf.at.least(1, \"TransactionRef should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"SUCCESS\");\r",
									"     \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data object has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    pm.expect(responseData.data.transactionRef).to.exist;\r",
									"    pm.expect(responseData.data.status).to.exist;\r",
									"    pm.expect(responseData.data.description).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TransactionRef is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.transactionRef).to.be.a('string').and.to.have.lengthOf.at.least(1, \"TransactionRef should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status is SUCCESS\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData.data).to.have.property('status').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Description Should Be QR is already Enabled\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData.data).to.have.property('description').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and is empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errors).to.exist;\r",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"737373\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"365886137536518188\",\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/enable",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable QrId successful Invalid mobile num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data','errors', );\r",
									"});\r",
									"\r",
									"pm.test(\"message returns:CQR with given QrId could not be found\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify code is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924416\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"331448942407195447\",\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924416\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/enable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable QrId successful  deleted qr with valid num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data','errors', );\r",
									"});\r",
									"\r",
									"pm.test(\"message returns:QR deleted or unavailable\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify code is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"605382858342390564\",\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/enable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable QrId successful Blank operator ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data','errors', );\r",
									"});\r",
									"\r",
									"pm.test(\"Operator Id cannot be empty\", function () {\r",
									"    // Get the response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the message is as expected\r",
									"    const expectedMessage = \"Operator Id cannot be empty\";\r",
									"    pm.expect(responseData.message).to.equal(expectedMessage, `Expected message to be \"${expectedMessage}\", but got \"${responseData.message}\"`);\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify code is a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"331448942407195447\",\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/enable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Enable QrId with Empty transref",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data', 'errors');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verify message returns with:INVALID REQUEST\",function (){\r",
									"      const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.include(\"INVALID_REQUEST\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorId\": \"MX164667\",\r\n    \"transactionRef\": \"\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"API\",\r\n    \"qrID\": \"331448942407195447\",\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/enable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"enable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Succesful",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"API\",\r\n    \"qrID\": \"814905830905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful invalid Qr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"message: CQR with given QrId could not be found\",function () {\r",
									"    const responseData =pm.response.json();\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.exist;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.errors).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"txId should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.errors).to.exist.and.to.be.an('array');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful Empty Num Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and contains the expected number of elements\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.errors).to.exist.and.to.be.an('array');\r",
									"  pm.expect(responseData.errors.length).to.equal(0);\r",
									"\r",
									"});\r",
									"\r",
									"  pm.test(\"Verify message is : Invalid mobile number format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"\",\r\n    \"channel\": \"API\",\r\n    \"qrID\": \"814905830905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful Invalid Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and contains : channel must either be API, WEB or USSD\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  \r",
									"\r",
									"});\r",
									"\r",
									"  pm.test(\"Verify message is : Invalid mobile number format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"ssss\",\r\n    \"qrID\": \"814905830905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful Empty Qr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"error is QR ID cannot be blank\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  \r",
									"\r",
									"});\r",
									"\r",
									"  \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful Empty Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and contains : channel must either be API, WEB or USSD\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  \r",
									"\r",
									"});\r",
									"\r",
									"  \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"\",\r\n    \"qrID\": \"814905830905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Disable QrId Successful Empty Agg ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should be a non-empty string\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the data is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is : Unauthorized access due to AggregatorId validation failure\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mjg1Mjc0MywiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjllMzFjZmU5LTg2NGMtNDFkNS04YTUzLTVhOGJkMDY0NzI4MSJ9.Y_E0g9e5C_AdAl5SLRz0rxPZ9Ar8-i2EjKdKeL9G9aHwEyrbDB-Mc9Bt9QPEBE6FMq0Di4Dk2cK2kOcXUUPfz-j_TS74Xdk8i0_v-TNuKiHYaSTN558UFh1gO1OLA3thnPmdYKVazucd8cGqY_RIdyRsWOwNahUg2bpI8ifqkhnTtarD_bZhUDWknOwCeBb0cksaBA7vpUK19lTlwMVocK_iQh2G41l77qM9f4qLoz_vyHzjm8PBVVDt-w9lP-27XwrZxV1GeVdpgTM3iOslwnG4mczBINFaFe-qYB1FCI9lFjglP0iKLEoZaofiUT1LYkNuNs1kV-M3wIx4b34jPw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"\",\r\n    \"qrID\": \"814905830905749558\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/disable",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"disable"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data property contains transactionRef, status, and description\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('transactionRef');\r",
									"    pm.expect(data).to.have.property('status');\r",
									"    pm.expect(data).to.have.property('description');\r",
									"});\r",
									"\r",
									"pm.test(\"Errors property is an empty array\", function () {\r",
									"    pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"888888\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"{{channel}}\",\r\n    \"qrID\": \"{{bulkreq}}\",\r\n    \"user\": {\r\n        \"userID\": \"2357035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID blank QrId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.errors).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Errors array should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"  pm.test(\"errors:Qr should not be blank\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"pm.expect(responseData.errors).to.include('qrID: QR ID cannot be blank')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"\",\r\n    \"user\": {\r\n        \"userID\": \"2357035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID blank Empty mobile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"  pm.test(\"message should be invalid mobile number format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"pm.expect(responseData.message).to.include('Invalid mobile number format')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"631096015207684970\",\r\n    \"user\": {\r\n        \"userID\": \"\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID blank Empty channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"  pm.test(\"message should be invalid\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"pm.expect(responseData.errors).to.include('channel: channel must either be API, WEB or USSD')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"23347035924413\",\r\n    \"channel\": \"\",\r\n    \"qrID\": \"631096015207684970\",\r\n    \"user\": {\r\n        \"userID\": \"\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"1111111111\",\r\n        \"nin\": \"1111111111\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID blank Empty bvn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId exist\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"  pm.test(\"message should be QR is Deleted Successfully \", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"232324\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"WEB\",\r\n    \"qrID\": \"631096015207684970\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"\",\r\n        \"nin\": \"\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete QrID blank Empty transRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response content type is 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId exist\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"  pm.test(\"message should be INVALID_REQUEST \", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"aggregatorID\": \"MX164667\",\r\n    \"transactionRef\": \"\",\r\n    \"mobileNumber\": \"2347035924413\",\r\n    \"channel\": \"API\",\r\n    \"qrID\": \"631096015207684970\",\r\n    \"user\": {\r\n        \"userID\": \"2347035924413\",\r\n        \"firstName\": \"Princess\",\r\n        \"lastName\": \"Edo-Osagie\",\r\n        \"bvn\": \"\",\r\n        \"nin\": \"\"\r\n    },\r\n    \"riskControlData\": {\r\n        \"operatorID\": \"2347035924413\",\r\n        \"currentLocation\": {\r\n            \"longitude\": \"22.1\",\r\n            \"latitude\": \"1.25\"\r\n        },\r\n        \"ipAddress\": \"127.2.1.212\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/delete",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mobile number is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.mobileNumber).to.include('2347035924413');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"RefValidityMinutes is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.a('number');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json()\r",
									"pm.environment.set('LinkRef', responseData.data.qrRef)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"{{sevenDigitNumber}}\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"panLast4Digits\": \"8539\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/reference",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref Empty aggregator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message to be Unauthorized access due to AggregatorId validation failure\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is set to application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify txId is null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"\",\r\n  \"transactionRef\": \"737373\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"panLast4Digits\": \"8539\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/reference",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref blank PAN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message',  'data','errors');\r",
									"});\r",
									"pm.test(\"verify error message is panLast4Digits: must not be blank\",function(){\r",
									"     const responseData = pm.response.json();\r",
									"   pm.expect(responseData.errors).to.include('panLast4Digits: must not be blank');\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"panLast4Digits\": \"\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/reference",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref  Invalid QRID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message',  'data','errors');\r",
									"});\r",
									"pm.test(\"verify  message\",function(){\r",
									"     const responseData = pm.response.json();\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Invalid Qr\", function () {\r",
									"    // Get the response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the message is as expected\r",
									"    const expectedMessage = \"Invalid Qr\";\r",
									"    pm.expect(responseData.message).to.equal(expectedMessage, `Expected message to be \"${expectedMessage}\", but got \"${responseData.message}\"`);\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"8\",\r\n  \"panLast4Digits\": \"8539\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/reference",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref Blank QRID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mobile number is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.mobileNumber).to.include('2347035924413');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"RefValidityMinutes is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.a('number');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Qr is required\", function () {\r",
									"    // Get the response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the message is as expected\r",
									"    const expectedMessage = \"Qr is required\";\r",
									"    pm.expect(responseData.message).to.equal(expectedMessage, `Expected message to be \"${expectedMessage}\", but got \"${responseData.message}\"`);\r",
									"\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"\",\r\n  \"panLast4Digits\": \"8539\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/reference",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref Blank User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Mobile number is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.mobileNumber).to.include('2347035924413');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"RefValidityMinutes is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.a('number');\r",
									"    pm.expect(responseData.data.refValidityMinutes).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is required\", function () {\r",
									"    // Get the response data\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Check if the message is as expected\r",
									"    const expectedMessage = \"User ID is required\";\r",
									"    pm.expect(responseData.message).to.equal(expectedMessage, `Expected message to be \"${expectedMessage}\", but got \"${responseData.message}\"`);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"panLast4Digits\": \"8539\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/reference",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve Ref with Invalid PAN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Message to be : No CQR found for this user\", function () {\r",
									"   const responseData = pm.response.json();\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"mobileNumber\": \"2347035924416\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"panLast4Digits\": \"8533\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/reference",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"reference"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.exist;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.exist;\r",
									"    //pm.expect(responseData.errors).to.exist;\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"CqrCounts is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Convert the value to a number using parseInt\r",
									"    const cqrCounts = parseInt(responseData.data.cqrCounts, 10);\r",
									"\r",
									"    // Check if 'cqrCounts' is a number\r",
									"    pm.expect(cqrCounts).to.be.a('number');\r",
									"    pm.expect(cqrCounts).to.satisfy((cqrCounts) => cqrCounts >= 0, \"CqrCounts should be a non-negative integer\");\r",
									"    \r",
									"   // pm.expect(responseData).to.be.an('object');\r",
									"    //pm.expect(responseData.data.cqrCounts).to.be.a('number').and.to.satisfy((cqrCounts) => cqrCounts >= 2, \"CqrCounts should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cqrs array is present in the response and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"   // Check if 'cqrs' is an array\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    // Check if 'cqrs' array has at least one element\r",
									"    pm.expect(responseData.data.cqrs).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.data.cqrs.forEach(function(cqr) {\r",
									"        pm.expect(cqr).to.include.all.keys('transactionID', 'cqrID', 'status', 'expiryDate', 'panLast4Digits', 'cardType', 'enabled');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"888888\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid invalid num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code should be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data should be null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"message should be Invalid mobile number format \", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  //pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"888888\",\r\n  \"mobileNumber\": \"23478098942\",\r\n  \"channel\": \"WEB\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid random aggregator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, data, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data', 'errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that txId, code, message, data, and errors are present in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"    pm.expect(responseData.data).to.be.null;\r",
									"    pm.expect(responseData.errors).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array');\r",
									"    pm.expect(responseData.errors).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Message should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId is either null or a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.satisfy((value) => value === null || typeof value === 'string' && value.length > 0, \"TxId should be either null or a non-empty string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"yyyy\",\r\n  \"transactionRef\": \"888888\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"channel\": \"API\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid invalid num empty transacREF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, data, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data', 'errors');\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"verify error is :transactionRef: transactionRef cannot be empty\",function(){\r",
									"     const responseData = pm.response.json();\r",
									"   pm.expect(responseData.errors).to.include('transactionRef: transactionRef cannot be empty');\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"channel\": \"WEB\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid empty aggregator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code should be a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data should be null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.data).to.be.null;\r",
									"});\r",
									"\r",
									"//pm.test(\"message should be Invalid mobile number format \", function () {\r",
									"  //const responseData = pm.response.json();\r",
									"  //pm.expect(responseData.data).to.be.null;\r",
									"//});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"\",\r\n  \"transactionRef\": \"737373\",\r\n  \"mobileNumber\": \"23478098942\",\r\n  \"channel\": \"API\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query cqrid USSD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, data, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data', 'errors');\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify message is Unauthorized access due to AggregatorId validation failure\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"TxId should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Code should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.code).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Message should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Errors array is present and empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.errors).to.exist.and.to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"TxId is null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJ2YXVsdCJdLCJtZXJjaGFudF9jb2RlIjoiTVgxMDQ2NTkiLCJyZXF1ZXN0b3JfaWQiOiIxMjM1MzQxMjgzNiIsInNjb3BlIjpbInByb2ZpbGUiXSwiaW5jb2duaXRvX3JlcXVlc3Rvcl9pZCI6IjEyMzEwNzU4NzIyIiwiZXhwIjoxNjk2MTM0NDY2LCJjbGllbnRfbmFtZSI6Ik5xd2RNSEdsZ0twIiwianRpIjoiNWI3OTMxMTktNDRiYy00MmUwLWFlNTAtNzE5Y2VhNmViN2IxIiwicGF5YWJsZV9pZCI6IjE4ODcwNTUiLCJjbGllbnRfaWQiOiJJS0lBMDY5MTU0NThBNjc5MkE4QUE2NDNBN0UxNEI0RDJFRDY1MkQ1RUFDMiJ9.Wr4zwB5DS5PIUEE5AxuWVpGnE_jx9RL7MMhyfTXUKcZ-LK-IbiNtduvkhYGb6gMeeG4vQwiVbkkG-ppFtZ2W4iLIfJvwO30PwnyrNbtMuCnM2DofWGuUscFt9Jy0zf4VAHiezKeJCVaLwIqstV8EFis34xtgjY1Tnhs4SLLQLJeHyNT5XUEzPx6nX3YNqpN9xkkagLLGI5Zbhbox937y_bJ7TNMcZ7t0y5yuVJAitPRtECd8v01fx3FnOsbEdulbO4z3yLkCDDfQBbCupsVL-p1UrTnpWCRiyi_MItD1lFM59K6d-SltAAml5l16VQ69fDxtBrVnLhc9zXvVTTHuiQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"yyyy\",\r\n  \"transactionRef\": \"737373\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"channel\": \"USSD\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"bvn\": \"111111111111\",\r\n    \"nin\": \"111111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/query",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"query"
							]
						}
					},
					"response": []
				},
				{
					"name": "request qr - ussd",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"808080\",\r\n  \"authData\": \"grZifX5tXuv+Cw6tR6ZUuhkAib6FnVmlZQYs0ozwhK/KH73+gf8kgLYcNNQy+iA7+MuX0Z2ETEpTQa8MFDkERPfNq5jpBYI5j55ch9tWpqvhfKr7PmsfbRdpbMJ1EMlZ4PJUBD3X+qd3HWNtA+4luA7Lwpjb/w6j5OgCBZOPsH9njU2PUeDoyKrHCONhnv57xtlN+rURA+csqrxvArjJXbj7YPM6sl8GJNW8dufgMinL1e5ND7FU4GmgyhOcXTQjjmwiWYypDga4v+70N3L0nS9shMTuwy//Fv40D8+YJg5b2eA4mv997c0+HsN9rhZ7TaeEJNu8kq0v/Nh1yBO6Ig==\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"channel\": \"USSD\",\r\n  \"hash\": \"999F4313C6E2D4DBFFA72CBE345380C3\",\r\n  \"instrumentIdentifier\": \"09E5E46C53F6009ADFDD8FA3F8DBFA6A596CFA7CF3FB6D28A\",\r\n  \"user\": {\r\n    \"userID\": \"2347035924413\",\r\n    \"firstName\": \"Princess\",\r\n    \"lastName\": \"Edo-Osagie\",\r\n    \"email\": \"moghaluhope@gmail.com\",\r\n    \"bvn\": \"1111111111\",\r\n    \"nin\": \"1111111111\"\r\n  },\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"111111111111\",\r\n      \"latitude\": \"111111111111\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/request/ussd",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request",
								"ussd"
							]
						}
					},
					"response": []
				},
				{
					"name": "bulk req Valid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the data array has cqrID and url properties\", function () {\r",
									"    pm.response.json().data.forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('cqrID');\r",
									"        pm.expect(item).to.have.property('url');\r",
									"    });\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json()\r",
									"pm.environment.set('bulkreq', responseData.data[0].cqrID)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random number between 0 and 2\r",
									"const randomNumber = Math.floor(Math.random() * 3);\r",
									"\r",
									"//console.log(randomNumber);\r",
									"\r",
									"const channel = ['API', 'WEB', 'USSD']\r",
									"pm.environment.set('channel', channel[randomNumber])"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTUxNjAzMywiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6Ijk0ZTNiZTM1LWYxMDMtNDYxMy04ZTBiLWY3ODVmODQxODc4OSJ9.QnEiZr9Lo-j9eYQ5Ms_i5RvJVOD1--YTpjS2zq4qtET52kLZX3BLXhXiC6r6MXUBujAMZ3CX0sD3SnA2s-g2yoaS8R3peQSVQJjybg_oMOmxRcHbQoiFlCf3PFxabtfG64mxSjMXoOUjphbxPz_9AOmjWVhIZk2m4nnPvw7P4ZRuufM9XbjlvpCMxIFu_ySpzss0n9Sbvk0mfAOXU38zJa6ha4u4Zfwp0zMGlpdmEp2b0KxdWsrVKfRh4t54bYjvd0UeCNMtQy-X-Gs3mOdNpGwXt2VlldsT1czWujCGGeu8GS_kiob24p1tatKG_-lTIG61hGk2oi8hgYBrJGf8mA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"{{sevenDigitNumber}}\",\r\n  \"quantity\": 10,\r\n  \"channel\": \"{{channel}}\"\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/request/bulk",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "bulk req with out Aggregator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data', 'errors');\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response should be aggregatorId: aggregatorId cannot be null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message','data', 'errors');\r",
									"\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTUxNjAzMywiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6Ijk0ZTNiZTM1LWYxMDMtNDYxMy04ZTBiLWY3ODVmODQxODc4OSJ9.QnEiZr9Lo-j9eYQ5Ms_i5RvJVOD1--YTpjS2zq4qtET52kLZX3BLXhXiC6r6MXUBujAMZ3CX0sD3SnA2s-g2yoaS8R3peQSVQJjybg_oMOmxRcHbQoiFlCf3PFxabtfG64mxSjMXoOUjphbxPz_9AOmjWVhIZk2m4nnPvw7P4ZRuufM9XbjlvpCMxIFu_ySpzss0n9Sbvk0mfAOXU38zJa6ha4u4Zfwp0zMGlpdmEp2b0KxdWsrVKfRh4t54bYjvd0UeCNMtQy-X-Gs3mOdNpGwXt2VlldsT1czWujCGGeu8GS_kiob24p1tatKG_-lTIG61hGk2oi8hgYBrJGf8mA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"\",\r\n  \"transactionRef\": \"111111\",\r\n  \"quantity\": 10,\r\n  \"channel\": \"API\"\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/request/bulk",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "bulk empty transactionREF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('txId');\r",
									"  pm.expect(responseData).to.have.property('code');\r",
									"  pm.expect(responseData).to.have.property('message');\r",
									"  pm.expect(responseData).to.have.property('data');\r",
									"  pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array is not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.errors).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify error message is transactionRef: transactionRef cannot be null\",function(){\r",
									"     const responseData = pm.response.json();\r",
									"   pm.expect(responseData.errors).to.include('transactionRef: transactionRef cannot be null');\r",
									"\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTUxNjAzMywiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6Ijk0ZTNiZTM1LWYxMDMtNDYxMy04ZTBiLWY3ODVmODQxODc4OSJ9.QnEiZr9Lo-j9eYQ5Ms_i5RvJVOD1--YTpjS2zq4qtET52kLZX3BLXhXiC6r6MXUBujAMZ3CX0sD3SnA2s-g2yoaS8R3peQSVQJjybg_oMOmxRcHbQoiFlCf3PFxabtfG64mxSjMXoOUjphbxPz_9AOmjWVhIZk2m4nnPvw7P4ZRuufM9XbjlvpCMxIFu_ySpzss0n9Sbvk0mfAOXU38zJa6ha4u4Zfwp0zMGlpdmEp2b0KxdWsrVKfRh4t54bYjvd0UeCNMtQy-X-Gs3mOdNpGwXt2VlldsT1czWujCGGeu8GS_kiob24p1tatKG_-lTIG61hGk2oi8hgYBrJGf8mA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"\",\r\n  \"quantity\": 10,\r\n  \"channel\": \"API\"\r\n}"
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/request/bulk",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "bulk req with out Quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - txId, code, message, data, and errors\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that txId is null\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.txId).to.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array should not be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errors).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Errors array should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response quantity: quantity must be at least 1\",\r",
									"        \"aggregatorId: aggregatorId cannot be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTUxNjAzMywiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6Ijk0ZTNiZTM1LWYxMDMtNDYxMy04ZTBiLWY3ODVmODQxODc4OSJ9.QnEiZr9Lo-j9eYQ5Ms_i5RvJVOD1--YTpjS2zq4qtET52kLZX3BLXhXiC6r6MXUBujAMZ3CX0sD3SnA2s-g2yoaS8R3peQSVQJjybg_oMOmxRcHbQoiFlCf3PFxabtfG64mxSjMXoOUjphbxPz_9AOmjWVhIZk2m4nnPvw7P4ZRuufM9XbjlvpCMxIFu_ySpzss0n9Sbvk0mfAOXU38zJa6ha4u4Zfwp0zMGlpdmEp2b0KxdWsrVKfRh4t54bYjvd0UeCNMtQy-X-Gs3mOdNpGwXt2VlldsT1czWujCGGeu8GS_kiob24p1tatKG_-lTIG61hGk2oi8hgYBrJGf8mA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorID\": \"MX164667\",\r\n  \"transactionRef\": \"111111\",\r\n  \"quantity\": 0,\r\n  \"channel\": \"API\"\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/request/bulk",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"request",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data object should exist and be an object\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Errors array should be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.errors).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ImageData is present and not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data.imageData).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"qrId\": \"{{bulkreq}}\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrRef\": \"{{LinkRef}}\",\r\n  \"channel\": \"{{channel}}\",\r\n  \"needImage\": true,\r\n  \"operator\": {},\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/linkref",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"linkref"
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkRef Invalid QR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, data, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data', 'errors');\r",
									"});\r",
									"pm.test(\"verify messsage is  Invalid qe provided for linking\", function () {\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"qrId\": \"4\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrRef\": \"003225\",\r\n  \"channel\": \"WEB\",\r\n  \"needImage\": true,\r\n  \"operator\": {},\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/linkref",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"linkref"
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkRef BlankRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('txId');\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not have data  property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property('null');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message property\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.not.have.property('qrRef: must not be blank');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"qrId\": \"669156318014858652\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrRef\": \"\",\r\n  \"channel\": \"USSD\",\r\n  \"needImage\": true,\r\n  \"operator\": {},\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/linkref",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"linkref"
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkRef duplicate request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data','errors');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"qrId\": \"454822684163895961\",\r\n  \"mobileNumber\": \"2347035924413\",\r\n  \"qrRef\": \"003225\",\r\n  \"channel\": \"WEB\",\r\n  \"needImage\": true,\r\n  \"operator\": {},\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/linkref",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"linkref"
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkRef invalid num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with txId, code, message, and errors properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('txId', 'code', 'message', 'data','errors');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"aggregatorId\": \"MX164667\",\r\n  \"transactionRef\": \"232324\",\r\n  \"qrId\": \"454822684163895961\",\r\n  \"mobileNumber\": \"2347035924412\",\r\n  \"qrRef\": \"003225\",\r\n  \"channel\": \"WEB\",\r\n  \"needImage\": true,\r\n  \"operator\": {},\r\n  \"riskControlData\": {\r\n    \"operatorID\": \"2347035924413\",\r\n    \"currentLocation\": {\r\n      \"longitude\": \"22.1\",\r\n      \"latitude\": \"1.25\"\r\n    },\r\n    \"ipAddress\": \"127.2.1.212\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{uat_QRI}}/api/v1/cqr/linkref",
							"host": [
								"{{uat_QRI}}"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"linkref"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET TOKEN BY CQR ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"qrId\":\"454822684163895961\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-service.azuremicroservices.io/api/v1/cqr/token",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"cqr",
								"token"
							],
							"query": [
								{
									"key": "cqrID",
									"value": "475437886282846530",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CQR History Service",
			"item": [
				{
					"name": "Get qr history",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-history-service.azuremicroservices.io/api/v1/history?startDate=2023-12-24 08:01:22&qrID=454822684163895961&endDate=2023-12-24 08:01:22",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-history-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"history"
							],
							"query": [
								{
									"key": "aggregatorID",
									"value": "",
									"disabled": true
								},
								{
									"key": "mobileNumber",
									"value": "",
									"disabled": true
								},
								{
									"key": "pageNum",
									"value": "",
									"disabled": true
								},
								{
									"key": "pageSize",
									"value": "",
									"disabled": true
								},
								{
									"key": "startDate",
									"value": "2023-12-24 08:01:22"
								},
								{
									"key": "qrID",
									"value": "454822684163895961"
								},
								{
									"key": "endDate",
									"value": "2023-12-24 08:01:22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get qr history - mobile no",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('txId');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData).to.have.property('errors');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Transactions array should exist\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Amount is a non-negative number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.transactions.forEach(transaction => {\r",
									"        pm.expect(transaction.amount).to.be.a('number');\r",
									"        pm.expect(transaction.amount).to.be.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate paymentType and paymentStatus values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.have.property('transactions').that.is.an('array');\r",
									"    \r",
									"    responseData.data.transactions.forEach(function(transaction) {\r",
									"        pm.expect(transaction).to.have.property('paymentType').that.is.a('string');\r",
									"        pm.expect(transaction).to.have.property('paymentStatus').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-history-service.azuremicroservices.io/api/v1/history/recent?aggregatorID=6767&mobileNumber=2347035924413&pageNum=0&pageSize=0",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-history-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"history",
								"recent"
							],
							"query": [
								{
									"key": "aggregatorID",
									"value": "",
									"disabled": true
								},
								{
									"key": "mobileNumber",
									"value": "",
									"disabled": true
								},
								{
									"key": "pageNum",
									"value": "",
									"disabled": true
								},
								{
									"key": "pageSize",
									"value": "",
									"disabled": true
								},
								{
									"key": "aggregatorID",
									"value": "6767"
								},
								{
									"key": "mobileNumber",
									"value": "2347035924413"
								},
								{
									"key": "pageNum",
									"value": "0"
								},
								{
									"key": "pageSize",
									"value": "0"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HEALTH CHECK",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-history-service.azuremicroservices.io/actuator/health",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-history-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CQR - Tran service",
			"item": [
				{
					"name": "Query Payment With Expired ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response contains either a consumerMobile or a payee\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.consumerMobile || responseData.payeeFirstName || responseData.payeeLastName || responseData.payeeBusinessName).to.exist;\r",
									"\r",
									"\r",
									"    pm.test(\"paymentStatus to be EXPIRED \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"EXPIRED\");\r",
									"\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTI3MDM2MiwiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjBhNTNiN2JiLWExZTItNDFmNC1iY2ViLTkxZjUzNzFhM2E5NSJ9.jT4v53aCodzlSkBfXIWtNmrDRDt0fERyC6uFzkTpA-wSumULc_u5hhpvajUnK52ul33jWJeQEQVIYo693MOgcH0Yh-aSzEhQ7Nok3ga6lKQ72PW6s-IaGa4fAScaa5fHsrvISuxTRAXBIneqK2pdGQU7j7GZadrp3czERapffx1cm2kMt8YA4dQVnIBeAYwCg6PZtuznYRlBAPR_bVo0Y8D_l1RgYa_T8cO-hMAF6ZG0CQ_rgY8nU8oT1B8x2E92JpQ9CrDHNaW6cZ6fHCD8cTpLZoVLsP71rctxi12RvSaeMuFhIWc7xwdspKdF92nSC6ttLLoa_t2_-A8BtAEz0w",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/query?paymentId=16",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"query"
							],
							"query": [
								{
									"key": "paymentId",
									"value": "16"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Payment With Blank payment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code and message properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTI3MDM2MiwiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjBhNTNiN2JiLWExZTItNDFmNC1iY2ViLTkxZjUzNzFhM2E5NSJ9.jT4v53aCodzlSkBfXIWtNmrDRDt0fERyC6uFzkTpA-wSumULc_u5hhpvajUnK52ul33jWJeQEQVIYo693MOgcH0Yh-aSzEhQ7Nok3ga6lKQ72PW6s-IaGa4fAScaa5fHsrvISuxTRAXBIneqK2pdGQU7j7GZadrp3czERapffx1cm2kMt8YA4dQVnIBeAYwCg6PZtuznYRlBAPR_bVo0Y8D_l1RgYa_T8cO-hMAF6ZG0CQ_rgY8nU8oT1B8x2E92JpQ9CrDHNaW6cZ6fHCD8cTpLZoVLsP71rctxi12RvSaeMuFhIWc7xwdspKdF92nSC6ttLLoa_t2_-A8BtAEz0w",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/query?paymentId=",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"query"
							],
							"query": [
								{
									"key": "paymentId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with specific properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.all.keys([\r",
									"        'cqrId', 'aggregatorId', 'customerId', 'transactionReference', 'consumerMobile', 'currencyCode', \r",
									"        'amount', 'channel', 'paymentType', 'description', 'paymentStatus', 'createdBy', 'id', 'ipAddress', \r",
									"        'riskControlData', 'payeeFirstName', 'payeeLastName', 'payeeBusinessName', 'payeeBusinessAddress', \r",
									"        'responseCode', 'responseMessage', 'createdOn', 'updatedOn'\r",
									"    ]);\r",
									"});\r",
									"\r",
									"\r",
									"// Extract data from the response\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Your test\r",
									"pm.test(\"Amount should be a number\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Id should be a number\", function () {\r",
									"    pm.expect(jsonData.id).to.be.a('number');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJpbmNvZ25pdG9fcmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIiwiYXVkIjpbImFwaS1nYXRld2F5IiwiYXJiaXRlciIsImNhZXNhciIsImhpbXMtcG9ydGxldCIsImluY29nbml0byIsImlzdy1jb2xsZWN0aW9ucyIsImlzdy1jb3JlIiwiaXN3LWluc3RpdHV0aW9uIiwiaXN3LWxlbmRpbmctc2VydmljZSIsImlzdy1wYXBlIiwiaXN3LXBhcHJzIiwiaXN3LXBhcHNzIiwiaXN3LXBheW1lbnRnYXRld2F5IiwiaXN3LXBvc3Qtb2ZmaWNlIiwia3ljLXNlcnZpY2UiLCJwYXNzcG9ydCIsInBvc3RpbGlvbi1hcGkiLCJwcm9qZWN0LXgtY29uc3VtZXIiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJxdC1zZXJ2aWNlIiwicXVpY2t0ZWxsZXItZXRsci1yZXF1ZXJ5IiwicmVjdXJyZW50LWJpbGxpbmctYXBpIiwidHJhbnNmZXItc2VydmljZS1hZG1pbiIsInRyYW5zZmVyLXNlcnZpY2UtY29yZSIsInZhdWx0Iiwidm91Y2hlci1hcGkiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJjbGllbnRfYXV0aG9yaXphdGlvbl9kb21haW4iOiJNWDYwNzIiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YxL3B1cmNoYXNlcyIsInJpZC1QT1NUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtUFVUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtR0VUL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMiLCJyaWQtREVMRVRFL2FwaS92MS9wdXJjaGFzZXMvKioiLCJyaWQtUE9TVC9hcGkvdjIvcHVyY2hhc2VzIiwicmlkLVBPU1QvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1QVVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1HRVQvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcyIsInJpZC1ERUxFVEUvYXBpL3YyL3B1cmNoYXNlcy8qKiIsInJpZC1QT1NUL2FwaS92My9wdXJjaGFzZXMiLCJyaWQtUE9TVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLVBVVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLUdFVC9hcGkvdjMvcHVyY2hhc2VzLyoqIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzIiwicmlkLURFTEVURS9hcGkvdjMvcHVyY2hhc2VzLyoqIl0sImV4cCI6MzI3MTI3MDM2MiwiY2xpZW50X25hbWUiOiJSN2pKaHJFZ3lMIiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjBhNTNiN2JiLWExZTItNDFmNC1iY2ViLTkxZjUzNzFhM2E5NSJ9.jT4v53aCodzlSkBfXIWtNmrDRDt0fERyC6uFzkTpA-wSumULc_u5hhpvajUnK52ul33jWJeQEQVIYo693MOgcH0Yh-aSzEhQ7Nok3ga6lKQ72PW6s-IaGa4fAScaa5fHsrvISuxTRAXBIneqK2pdGQU7j7GZadrp3czERapffx1cm2kMt8YA4dQVnIBeAYwCg6PZtuznYRlBAPR_bVo0Y8D_l1RgYa_T8cO-hMAF6ZG0CQ_rgY8nU8oT1B8x2E92JpQ9CrDHNaW6cZ6fHCD8cTpLZoVLsP71rctxi12RvSaeMuFhIWc7xwdspKdF92nSC6ttLLoa_t2_-A8BtAEz0w",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/query?paymentId={{paymentID}}",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"query"
							],
							"query": [
								{
									"key": "paymentId",
									"value": "{{paymentID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains transactionRef in data\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('transactionRef');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains paymentID in data\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('paymentID');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains status in data\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains payValidityMinutes in data\", function () {\r",
									"    pm.expect(pm.response.json().data).to.have.property('payValidityMinutes');\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json()\r",
									"pm.environment.set('paymentID', jsonData.txId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"\r",
									"console.log(sevenDigitNumber);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"MX164667\",\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\n    \"payment\": {\n        \"cqrId\": \"{{bulkreq}}\",\n        \"amount\": 50,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n    \"channel\": \"{{channel}}\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"6767\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment with deleted Qr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test('message is cqrId::480227350603631461 is invalid!', function () {\r",
									"    const responseData = pm.response.json()\r",
									"pm.expect(responseData.message).to.eql(\"cqrId::480227350603631461 is invalid!\")\r",
									"})\r",
									"\r",
									"\r",
									"pm.test('code is 06', function () {\r",
									"    const responseData = pm.response.json()\r",
									"pm.expect(responseData.code).to.eql(\"06\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"\r",
									"console.log(sevenDigitNumber);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"MX164667\",\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\n    \"payment\": {\n        \"cqrId\": \"480227350603631461\",\n        \"amount\": 50,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n        \"channel\": \"API\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"6767\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment Empty Cqrid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message cqrId:: is invalid! \", function () {\r",
									"    const responseData = pm.response.json();\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"console.log(sevenDigitNumber);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"6767\",\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\n    \"payment\": {\n        \"cqrId\": \"\",\n        \"amount\": 50,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n        \"channel\": \"API\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"6767\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment Empty trans REF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message Transaction reference cannot be empty! \", function () {\r",
									"    const responseData = pm.response.json();\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"console.log(sevenDigitNumber);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"6767\",\n    \"transactionRef\": \"\",\n    \"payment\": {\n        \"cqrId\": \"669156318014858652\",\n        \"amount\": 50,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n        \"channel\": \"API\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"6767\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment Empty amount field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const sevenDigitNumber = Math.floor(1000000 + Math.random() * 9000000);\r",
									"console.log(sevenDigitNumber);\r",
									"pm.environment.set(\"sevenDigitNumber\", sevenDigitNumber);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"6767\",\n    \"transactionRef\": \"{{sevenDigitNumber}}\",\n    \"payment\": {\n        \"cqrId\": \"{{bulkreq}}\",\n        \"amount\": 0,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n        \"channel\": \"{{channel}}\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Payment Empty Aggre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message Aggregator Id cannot be empty!\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"aggregatorID\": \"\",\n    \"transactionRef\": \"606060\",\n    \"payment\": {\n        \"cqrId\": \"669156318014858652\",\n        \"amount\": 0,\n        \"description\":\"test\",\n        \"transactionType\":\"PAYMENT\",\n        \"channel\": \"API\",\n        \"currencyCode\": \"566\"\n    },\n    \"payee\": {\n        \"payeeID\" :\"6767\",\n        \"firstName\":\"Test\",\n        \"lastName\":\"John\",\n        \"businessName\":\"John Co\",\n        \"businessAddress\":\"test business address\"\n    },\n    \"riskControlData\": \"test risk control data\",\n    \"ipAddress\": \"127.0.01\",\n    \"mobileNumber\": \"2347035924413\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/request",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with data property\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data has required properties\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.have.property('cqrId');\r",
									"    pm.expect(data).to.have.property('aggregatorId');\r",
									"    pm.expect(data).to.have.property('customerId');\r",
									"    pm.expect(data).to.have.property('transactionReference');\r",
									"    pm.expect(data).to.have.property('consumerMobile');\r",
									"    pm.expect(data).to.have.property('currencyCode');\r",
									"    pm.expect(data).to.have.property('amount');\r",
									"    pm.expect(data).to.have.property('channel');\r",
									"    pm.expect(data).to.have.property('paymentType');\r",
									"    pm.expect(data).to.have.property('description');\r",
									"    pm.expect(data).to.have.property('paymentStatus');\r",
									"    pm.expect(data).to.have.property('createdBy');\r",
									"    pm.expect(data).to.have.property('id');\r",
									"    pm.expect(data).to.have.property('payeeID');\r",
									"    pm.expect(data).to.have.property('payeeFirstName');\r",
									"    pm.expect(data).to.have.property('payeeLastName');\r",
									"    pm.expect(data).to.have.property('payeeBusinessName');\r",
									"    pm.expect(data).to.have.property('payeeBusinessAddress');\r",
									"    pm.expect(data).to.have.property('token');\r",
									"    pm.expect(data).to.have.property('panLast4Digits');\r",
									"    pm.expect(data).to.have.property('cardType');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/pending?mobileNumber=2347035924413",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"pending"
							],
							"query": [
								{
									"key": "mobileNumber",
									"value": "2347035924413"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending Transaction empty mobile num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with code and message properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('code', 'message');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is Invalid Msisdn format, phone number should be 11 digits e.g 0806599999\"\r",
									", function () {\r",
									"    const responseData = pm.response.json();\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJhdWQiOlsiYXBpLWdhdGV3YXkiLCJhcmJpdGVyIiwiY2Flc2FyIiwiaGltcy1wb3J0bGV0IiwiaW5jb2duaXRvIiwiaXN3LWNvbGxlY3Rpb25zIiwiaXN3LWNvcmUiLCJpc3ctaW5zdGl0dXRpb24iLCJpc3ctbGVuZGluZy1zZXJ2aWNlIiwiaXN3LXBheW1lbnRnYXRld2F5IiwicGFzc3BvcnQiLCJwcm9qZWN0LXgtbWVyY2hhbnQiLCJyZWN1cnJlbnQtYmlsbGluZy1hcGkiLCJzYWZldG9rZW4tYXMtYS1zZXJ2aWNlIiwidmF1bHQiLCJ3YWxsZXQiLCJ3ZWJwYXktcG9ydGxldCJdLCJtZXJjaGFudF9jb2RlIjoiTVg2MDcyIiwicmVxdWVzdG9yX2lkIjoiMTIzODA4NTk1MDMiLCJzY29wZSI6WyJwcm9maWxlIl0sImFwaV9yZXNvdXJjZXMiOlsicmlkLVBPU1QvYXBpL3YyLyoqIl0sImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIxMjM4MDg1OTUwMyIsImNsaWVudF9uYW1lIjoiUjdqSmhyRWd5TCIsImNsaWVudF9sb2dvIjpudWxsLCJqdGkiOiIxNDBkZjE0MC0wY2M0LTQ1ZTAtOWFlYy01MzZkNGFiMGRmYTMiLCJwYXlhYmxlX2lkIjoiMzM1OTciLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUFCMjNBNEUyNzU2NjA1QzFBQkMzM0NFM0MyODdFMjcyNjdGNjYwRDYxIn0.Z4TTjhCKH-G73GuxLqO-1cqldEnXb5_7c83bRj01o3gNZSLquZBA1cE12cECUFMzwrU2WLHXMLbrCXRN1FC7VJXACbzAylLT_gAIfIzjqXwvsWCHdsxlLfIK31MC7K6hqjwwRUN66WdQ-2CC_HF1GwjDSTTnIngz2ygkVlVy6N_Lwj9nRnpoHeMjjsbOVOjDrMWq88tDJilh5iNEfaaz_wxL-8i0Tc9JShP1lmmT_M2JDjkOD0pn9FUXQjltqqU3KHyMoJs2_jE5yIAayMpnrO_x4AsT1gFJqv9zPBe_DIb9ljVTQHC8suH3o-OEfSqOn1g-Mkc9F6PC28YyqG9-6Q",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/pending?mobileNumber=",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"pending"
							],
							"query": [
								{
									"key": "mobileNumber",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is Payment cannot be processed because it has expired\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Payment cannot be processed because it has expired\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paymentID\": \"{{paymentID}}\",\n     \"mobileNumber\": \"2347035924413\",\n     \"transactionType\":\"PAYMENT\",\n     \"pinData\":\"1312\",\n     \"paymentStatus\": \"AUTHORIZE\",\n     \"channel\":\"API\"  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/authorize",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment with expired id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message is Payment cannot be processed because it has expired\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Payment cannot be processed because it has expired\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paymentID\": \"22\",\n     \"mobileNumber\": \"2347035924413\",\n     \"transactionType\":\"PAYMENT\",\n     \"pinData\":\"1312\",\n     \"paymentStatus\": \"AUTHORIZE\",\n     \"channel\":\"API\"  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/authorize",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize Payment with blank channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.exist;\r",
									"    pm.expect(responseData.message).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Code is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Message Channel cannot be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paymentID\": \"23\",\n     \"mobileNumber\": \"2347035924413\",\n     \"transactionType\":\"PAYMENT\",\n     \"pinData\":\"1312\",\n     \"paymentStatus\": \"AUTHORIZE\",\n     \"channel\":\"\"  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/authorize",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty paymentStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code to be 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"pm.test(\"Message is PaymentStatus cannot be empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.message).to.eql(\"Message is PaymentStatus cannot be empty\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJtZXJjaGFudF9jb2RlIjoiTVgxNjQ2NjciLCJyZXF1ZXN0b3JfaWQiOiIyODkzMDE1ODQ2NCIsImluY29nbml0b19yZXF1ZXN0b3JfaWQiOiIyODkxNTMyNTg0NiIsInBheWFibGVfaWQiOiIxMjQwOTYiLCJjbGllbnRfZGVzY3JpcHRpb24iOm51bGwsImNsaWVudF9pZCI6IklLSUE1MUUyRDk5RTQ0RERFNUMyMTE2OUQxODc3NjlEOTUzREUyOTlCQTU4IiwiYXVkIjpbImFyYml0ZXIiLCJpbmNvZ25pdG8iLCJpc3ctY29sbGVjdGlvbnMiLCJpc3ctY29yZSIsImlzdy1wYXltZW50Z2F0ZXdheSIsInBhc3Nwb3J0IiwicHJvamVjdC14LW1lcmNoYW50IiwidmF1bHQiXSwiY2xpZW50X2F1dGhvcml6YXRpb25fZG9tYWluIjoiTVgxNjQ2NjciLCJzY29wZSI6WyJwcm9maWxlIl0sImV4cCI6MTY5Mzg2MjE5NiwiY2xpZW50X25hbWUiOiJrMHBobEpzY0NOam8rTGhMNS9CbkttK25SZHJJeUVQVlkySnFnRFgxV29VUlZQaUY5M2JPb1NaaHJ1bjY1K0pVX01YMTY0IiwiY2xpZW50X2xvZ28iOm51bGwsImp0aSI6IjM2NmJiODNhLWQ5NzctNGE4MS04ZTVmLWM5Zjc3NjdkNDUxMCJ9.eJ0iHezweWA3qdvCNxhUz0rlzh6Uax5j7tCqVmae1sXgVR_Dt1-gvvhNYEwvsGaDg94s1rC5BYZv8HfWicsuDw2EHBL_FRJIwYYgDypsNRG1Q1J5FLaOomAU51tp70Cdr75ynr37RRADYx_VNJXHyamsEaBWrbPu6Q47qf2TF0Ob_hR9djYsCIM7vc0TPnVDGl39lJWCm6xJfnIRIAq-8yO1HJppK4Z_-NjwK1pA9utPRV8db1rNOLd4BPWgQ6DNbNix4hIbEjvTxtWQRvwkLQh_Jr30CJMr6ZEnpbyM9qa9YHej5q9AaVrni-p25Fl5-kNXBRiBJIbwnYOCxqjWtA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paymentID\": \"{{paymentID}}\",\n     \"mobileNumber\": \"2347035924413\",\n     \"transactionType\":\"PAYMENT\",\n     \"pinData\":\"1312\",\n     \"paymentStatus\": \"\",\n     \"channel\":\"{{channel}}\"  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://isw-psb-test-sc-cqr-transaction-service.azuremicroservices.io/api/v1/pay/authorize",
							"protocol": "https",
							"host": [
								"isw-psb-test-sc-cqr-transaction-service",
								"azuremicroservices",
								"io"
							],
							"path": [
								"api",
								"v1",
								"pay",
								"authorize"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}